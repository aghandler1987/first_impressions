<?php


function bt_questionnaire_node_info(){
  $node_type = array();
  
  $node_types['bt_questionnaire'] = array(
      'name' => 'Questionnaire',
      'base' => 'bt_questionnaire',
      'type' => 'bt_questionnaire',
      'description' => 'A content type that has a user photo and a set of questions',
      'has_title' => FALSE,
      'has_body' => FALSE,
  );
  
  return $node_types;
}

function bt_questionnaire_install(){
  $questionnaire_type = array(
    'type' => 'bt_questionnaire',
    'name' => 'bt_questionnaire',
    'base' => 'bt_questionnaire',
    'description' => 'Create a new questionnaire',
    'custom' => TRUE,
    'modified' => TRUE,
    'locked' => FALSE,
  );

  $questionnaire_type = node_type_set_defaults($questionnaire_type);
  $status = node_type_save($questionnaire_type);
  
  $t_args = array('%name' => $questionnaire_type->name);
  if ($status == SAVED_UPDATED) { // update case
    drupal_set_message(t('The content type %name has been updated.', $t_args));
  }
  elseif ($status == SAVED_NEW) { // create case
    drupal_set_message(t('The content type %name has been added.', $t_args));
    watchdog('node', 'Added content type %name.', $t_args, WATCHDOG_NOTICE, l(t('view'), 'admin/structure/types'));
  }
  
}

function bt_questionnaire_start(){
  global $user;
  
  if(!user_is_logged_in()){
    drupal_goto('login');
  }
  
  $nid = bt_questionnaire_has_questionnaire();
  if (!$nid){
    drupal_goto('questionnaire/add');
  }
  
  drupal_goto('questionnaire/' .$nid);
}

function bt_questionnaire_menu(){
  $items = array();
  
  $items['survey_list'] = array(
      'page callback' => 'bt_questionnaire_list',
      'access callback' => TRUE,
      'title' => 'First Impressions',
      'type' => MENU_NORMAL_ITEM
  );
  
  $items['q_list_ajax'] = array(
      'page callback' => 'bt_questionnaire_list_ajax',
      'access callback' => TRUE,
      'title' => 'Ajax list',
      'type' => MENU_CALLBACK
  );
  
  $items['questionnaire'] = array(
    'page callback' => 'bt_questionnaire_start', 
    'access callback' => TRUE,
    'title' => 'My Survey',
    'type' => MENU_NORMAL_ITEM
  );
  
  $items['questionnaire/%node'] = array(
    'title' => 'What Are Your First Impressions?',
    'page callback' => 'bt_questionnaire_view',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['questionnaire/add'] = array(
    'title' => 'Add Questionnaire',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bt_questionnaire_create_form'),
    'access callback' => 'bt_questionnaire_create_access',
    'type' => MENU_CALLBACK,
  );
  
  $items['questionnaire/%node/edit'] = array(
    'title' => 'Edit Questionnaire',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bt_questionnaire_edit_form', 1),
    'access callback' => 'bt_core_is_bobbi_user',
    'type' => MENU_CALLBACK,
  );
  
  
  $items['questions'] = array(
      'title' => 'Questions',
      'page callback' => 'bt_questionnaire_questions_view',
      'access callback' => 'bt_core_is_admin',
      'type' => MENU_CALLBACK
  );
  
  $items['questions/add'] = array(
      'title' => 'Add New Question',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('bt_questionnaire_add_question_form'),
      'access callback' => 'bt_core_is_admin',
      'type' => MENU_CALLBACK
  );
    
  return $items;
}

function bt_questionnaire_view($node){ 
  global $user;
  
  menu_set_active_item('questionnaire');  
  $output = '';
  $url = image_style_url('bt_questionnaire_image', $node->image);
  $output .= '<div class = "picture"><img class = "main-picture" src ="' . $url .'"/></div>';
  if ($node->uid == $user->uid){
    $output .= '<div id = "questionnaire-owner-links">';
    $output .='<a class = "edit-questionnaire user-link center" href = "/questionnaire/' . $node->nid . '/edit">Edit Poll</a>';
    $output .='<a class = "delete-questionnaire user-link center" href = "/questionnaire/' . $node->nid . '/delete">Delete Poll</a>';
    $output .= '</div>';
  }
  $form = drupal_get_form('bt_questionnaire_vote_form', $node);
  $output .= drupal_render($form);
  $output .= bt_questionnaire_results($node);
  return $output;
  
}

function bt_questionnaire_get_node_cookie_name($nid){
  return 'bt_vote_' . $nid;
}

function bt_questionnaire_set_node_cookie($nid){
  $name = bt_questionnaire_get_node_cookie_name($nid);
  $expire = time() + (24*60*60);
  setcookie($name, 1, $expire, '/');
}

function bt_questionnaire_can_vote($nid){
  global $user;
  if(user_is_logged_in()){
    $count = db_query("SELECT COUNT(*) as 'count' FROM questionnaire_responses WHERE qnid = :nid AND uid = :uid", array(':nid' => $nid, ':uid' => $user->uid));
    foreach($count as $c){
      $count = $c->count;
      break;
    }    
    return $count == 0;
  }
  else{
    $cookie_name = bt_questionnaire_get_node_cookie_name($nid);
    return isset($_COOKIE[$cookie_name]);
  }
  return TRUE;
}

function bt_questionnaire_vote_form($form, &$form_state, $questionnaire){
  global $user;
  $form = array();
  $questions = $questionnaire->questions;
  $form['header'] = array(
      '#type' => 'markup',
      '#markup' => '<h2 class = "header">Is This Person...</h2>'
  );
  $form['questions'] = array(
       '#tree' => TRUE,
      '#prefix' => '<div id = "questions-vote-wrapper" class = "clearfix">',
      '#suffix' => '</div>'
  );
  $extra_class = '';
  $i = 1;
  foreach($questions as $ques_id=>$ques){
   $answers = array();
   if ($i/1 == 1){
     $extra_class = 'left-float';
   }
   elseif ($i/2 == 1){
     $extra_class = 'float-center';
   }
   elseif ($i/3 == 1){
     $extra_class = 'right-float';
   }
   foreach ($ques['answers'] as $ans_id=>$ans){
      $answers[$ans_id] = $ans['title'];
   }

   $form['questions'][$ques_id] = array(
        '#prefix' => '<div class ="question-display '. $extra_class .'" id = "question-' . $ques_id . '">', //<span class = "question-title">' . $ques['title'] . '</span>',
        '#type'=>'radios',
        '#options' => $answers,
        '#suffix' => '</div>',
    );
   $i++;
  }
  $form['question_count'] = array(
      '#type' => 'value',
      '#value' => count($questions)
  );
  $form['qnid'] = array(
      '#type' => 'value',
      '#value' => $questionnaire->nid
  );

  if (($questionnaire->uid != $user->uid) || bt_questionnaire_can_vote($questionnaire->nid)){
    $form['submit'] = array(
      '#type'=>'submit',  
      '#value' => t('Submit')
    );
  }
  
  $form['break'] = array(
      '#type' => 'markup',
      '#markup' => '<hr>'
  );
  return $form;
}

function bt_questionnaire_list_ajax(){
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
  ->entityCondition('bundle', 'bt_questionnaire')                    
  ->propertyCondition('status',NODE_PUBLISHED, '=')
  ->propertyOrderBy('created', 'DESC');
  
  $query->count = TRUE;
  $count = $query->execute();

  $max = 20;
  $start = 0;
  if(isset($_GET['start'])){
    $start = $_GET['start'];
  }
  
  $query->count = FALSE;
  $query->range($start, $max);
  $res = $query->execute();
  
  $nodes = entity_load('node', array_keys($res['node']));
  $nids = array_keys($nodes);
  $res = db_query("SELECT qnid, COUNT(*) FROM questionnaire_responses WHERE qnid IN(:nids) GROUP BY qnid", array(':nids' => $nids));
  
  $out = '';
  $rows = array();
  foreach($nodes as $nid => $node){
    $row_disp = '<a href="/questionnaire/' . $nid . '">';
    $row_disp .= '<div class="image-item"><img src="' . image_style_url('bt_questionnaire_image_thumb', $node->image) . '"/></div>';
    $row_disp .= '</a>';
    $rows[] = array('data' => $row_disp, 'class' => array('q-list-item'));
  }
  $out .= '<div id="q-list-wrapper">' . theme('item_list', array('items' => $rows)) . '</div>';
  $out .= bt_core_pager($count, $start, $max, 'view_questionnaires');
  while(ob_end_clean());
  print $out;
  exit;
}

function bt_questionnaire_vote_form_validate($form, &$form_state){
  $values = $form_state['values'];
  
  $responses = array();
  foreach ($values['questions'] as $qid=>$ans_id){
    if ($ans_id)
      $responses[$qid] = $ans_id;
  }
  if (count($responses) != $values['question_count'])
    form_set_error('answer_all', 'Please select an answer for each questions!');
  
  $form_state['values']['responses'] = $responses;
}

function bt_questionnaire_vote_form_submit($form, &$form_state){
  global $user;
  
  $values = $form_state['values'];
  $response = $values['responses'];
  $db_args = array();
  $inserts = '';
  $i = 0;
  foreach ($response as $question_id => $answer_id){
    if (strlen($inserts))
      $inserts .= ', ';
    $inserts .= '(:qnid' . $i . ', :uid' . $i .', :question_id' . $i .', :answer_id' . $i . ')';    
    $new_args = array(':qnid' . $i => $values['qnid'], ':uid' . $i => $user->uid, ':question_id' . $i => $question_id, ':answer_id' . $i => $answer_id);
    $db_args = array_merge($db_args, $new_args);
    $i++;
  }
  $query = "INSERT INTO questionnaire_responses (qnid, uid, question_id, answer_id) VALUES " . $inserts;
  db_query($query, $db_args);
  drupal_set_message('Thank you for voting! Check out what other people thought below');
  
}

function bt_questionnaire_add_question_form($form, &$form_state){
  $form = array();
  $form['#tree'] = TRUE;
  drupal_add_js(drupal_get_path('module', 'bt_questionnaire') . '/bt_questionnaire.js');
  $form['question_text'] = array(
      '#type' => 'textfield',
      '#prefix' => '<span class = "question-text">Enter new question topic:</span>'
  );
  $form['answers'] = array(
      '#tree'=>TRUE,
      '#ajax' => TRUE

  );
  
  for ($i = 1; $i<11; $i++){
    $extra_class = '';
    if ($i > 2){
      $extra_class = 'hidden';
    }
    $form['answers'][] = array(
         '#type' => 'textfield',
         '#prefix' => '<div class = "question-answer-wrapper ' . $extra_class . '"><span class = "question-text">Choice ' . $i. ':</span>',
         '#suffix' => '</div>'
    );
  }

  $form['answers']['add_answer'] = array(
      '#type' => 'markup',
      '#markup' => '<div id = "add-answer"><a class = "add-answer">Add Options</span></div>'
  );
  $form['submit'] = array(
      '#type'=>'submit',
      '#value' => t('Create')
  );
  
  return $form;
}

function bt_questionnaire_add_question_form_validate($form, &$form_state){
  $question_options = $form_state['values']['answers'];
  $valid_options = array_filter($question_options);
  $form_state['values']['valid_options'] = $valid_options;
  
  $question_text = $form_state['values']['question_text'];
  if (empty($question_text))
    form_set_error('questionnaire-question-text', t('You must have a question title.'));
    
  if(count($valid_options) < 2) {
    form_set_error('questionnaire-questions', t('You must have at least two options.'));
  }
  
}

function bt_questionnaire_add_question_form_submit($form, &$form_state){
  $values = $form_state['values'];
  $choices = $values['valid_options'];

  $question_text = $values['question_text'];
  $question_id = db_query("INSERT INTO questionnaire_questions (title, timestamp) VALUES (:title, :timestamp)", array(':title' =>$question_text, ':timestamp' => time()), array('return' => Database::RETURN_INSERT_ID));
  
  $db_args = array();
  $i = 0;
  $inserts = '';
  foreach ($choices as $choice){
    if (strlen($inserts))
      $inserts .= ' ,';
    $inserts .= '(:id' . $i . ', :choice' . $i .')';
    $new_args = array(':id' . $i => $question_id, ':choice' . $i => $choice);
    $db_args = array_merge($db_args, $new_args);
    $i++;
  }
  $base_query = "INSERT INTO questionnaire_questions_answers (question_id, title) VALUES " . $inserts;
  db_query($base_query, $db_args);
  drupal_set_message('Question Created');
}

/*
 * Admin area to add new questions
 */
function bt_questionnaire_questions_view(){
  $output = '';
  $output = 'Add new question topic:<a class ="add-question" href = "/questions/add">ADD</a>';
  $questions = bt_questionnaire_questions_get();
  $header = array();
  $header[] = array('data' =>'Topic');
  $header[] = array('data' => 'Options');
  $rows = array();
  foreach ($questions as $qid=>$question){
    $row = array();
    $row[] =array('data' => $question['title']);
    $options ='';
    $answers = $question['answers'];
    foreach ($answers as $answer_id => $answer){
      $options .= $answer['title'] . '</br>';
    }
    $row[] = array('data' => $options);
    $rows[] = $row;
  }

  $output .= theme('table',array('header'=> $header,'rows'=> $rows));
  return $output;
}

/*
 * gets list of all possible questions
 */
function bt_questionnaire_questions_get(){
  $query = "SELECT q.id, q.title as 'question', qa.answer_id, qa.title as 'answer' FROM questionnaire_questions q
            JOIN questionnaire_questions_answers qa
            ON q.id = qa.question_id ORDER BY timestamp DESC";
  $result = db_query($query);
  $questions = array();
  foreach($result as $r){
    $questions[$r->id]['title'] = $r->question;
    $questions[$r->id]['answers'][$r->answer_id]['title'] = $r->answer;
  }
  return $questions;
}

function bt_questionnaire_get_question_registry(){
  static $questions;  
  $result = db_query("SELECT * FROM questions");
  while ($r = db_fetch_object($result)){
    $question_data = unserialize($r->data);
    $questions[$r->id] = $question_data;
  }
  return $questions;
}

function bt_questionnaire_has_questionnaire($uid = NULL){
  global $user;
  if (!$uid)
    $uid = $user->uid;
  
  $result = db_query("SELECT q.nid FROM questionnaire q LEFT JOIN node n ON q.nid = n.nid WHERE q.uid = :uid AND n.status = 1 LIMIT 1", array(':uid' =>$uid));
  $nid = '';
  foreach ($result as $row){
    $nid = $row->nid;
    break;
  }
  
  if ($nid)
    return $nid;
  
  return FALSE;
}

function bt_questionnaire_create_access(){
  return !bt_questionnaire_has_questionnaire() && bt_core_is_bobbi_user();
}



function bt_questionnaire_create_form($form, &$form_state){
  menu_set_active_item('questionnaire');
  $form = array();  
  $photo_instructions = '<ul class = "photo-instructions">
    <li>FULL LENGTH PHOTOS IN WHICH YOUR OUTFIT IS CLEARLY VISIBLE WORK BEST!</li>
    <li>KEEP IN MIND THIS PHOTO AND FEEDBACK WILL BE PUBLIC.</li>
    <li>PLEASE AVOID USING HEADSHOTS, GROUP PHOTOS, AND DARK OR GRAINY IMAGES TO ENSURE THAT YOU RECEIVE ACCURATE FEEDBACK.</li>
    </ul>';
  $form['file'] = array(
      '#type' => 'file',
      '#size' => 40,
      '#prefix' => '<ol class = "questionnaire-ordered-list"><li class = "ordered-element">Upload Your Photo</li>' . $photo_instructions,
    );
  $form['gender'] = array(
        '#type'=>'radios',
        '#options' => array('M' => 'Male', 'F' => 'Female'),
        '#title' => 'Please select your gender:'
  );
  $form['instructions'] = array(
      '#type' => 'markup',
      '#markup' => '<li class = "ordered-element">Pick Your Poll Questions</li><div class ="questionnaire-instructions">YOU MAY SELECT UP TO SIX. THE PUBLIC WILL VOTE ON THESE CHARACTERISTICS</div>'
  );
  
  $questions = bt_questionnaire_questions_get();
  $form['questions'] = array(
      '#tree'=>TRUE
  );
  
  foreach ($questions as $qid=>$question){
    $answers = $question['answers'];
    $answer_text = ''; 
    if (count($answers) < 3){
      foreach ($answers as $answer_id => $answer){   
        if (strlen($answer_text))
          $answer_text .= ' OR ';
        $answer_text .= $answer['title'];
      }
    }
    $form['questions'][$qid]['select'] = array(
      '#type' => 'checkbox',
      '#prefix' => '<div class = "question-wrapper">',
      '#title' =>strlen($answer_text) ? $answer_text : $question['title'],
      '#suffix' => '</div>'
    );
  }
  $submit_instructions = '<div class ="submit-instructions">ONCE YOU CLICK THE BUTTON, YOUR PHOTO WILL BE POSTED
    TO YOUR PUBLIC POLL PAGE. YOU CAN CHECK BACK TO THIS PAGE AS OFTEN AS YOU\'D LIKE TO SEE WHAT THE BT COMMUNITY THINKS OF YOU.</div></ol>';
  $form['submit'] = array(
      '#prefix' => '<li class = "ordered-element">Finish!</li>' . $submit_instructions,
      '#type'=>'submit',
      '#value' => t('Go!')
  );
  return $form;
}

function bt_questionnaire_create_form_validate($form, &$form_state){
  if ($file = file_save_upload('file', array(), 'public://', FILE_EXISTS_RENAME)){
   $file->status = FILE_STATUS_PERMANENT;
   file_save($file);
   $form_state['storage']['file'] = $file;
  } 
  else {
    form_set_error('file', 'File upload error');
  } 
  
  if (!isset($form_state['values']['gender']))
    form_set_error('gender', 'Please select a gender');
  
  $questions = $form_state['values']['questions'];
  foreach ($questions as $qid => $question){
    if ($question['select']){
      $selected_questions[$qid] = $qid;
    }
  }

  //make sure user selected at least 2 questions but no more than 6
  if (count($selected_questions) < 2 || count($selected_questions) > 6)
    form_set_error('questions', 'You must select at least 2 questions but no more than 6 questions');
}

function bt_questionnaire_create_form_submit($form, &$form_state){
  global $user;
  $values = $form_state['values'];
  $questions = $values['questions'];
  $new_questions = array();
  $remove_questions = array();
  foreach ($questions as $qid => $question){
    if ($question['select']){
      $new_questions[$qid] = $qid;
    }
    else{
      $remove_questions[$qid] = $qid;
    }
  }
  
  $file = $form_state['storage']['file'];
  $questionnaire = new StdClass();
  $questionnaire->type = 'bt_questionnaire';
  //$questionnaire->field_body_images[] = array($file);
  $questionnaire->uid = $user->uid;
  //$questionnaire->field_image[LANGUAGE_NONE][0] = $file;
  
  node_save($questionnaire);
  
  $qid = $questionnaire->nid;
  $gender = $values['gender'];      
  db_query("INSERT INTO questionnaire (nid, uid, timestamp, fid, gender) VALUES (:nid, :uid, :timestamp, :fid, :gender)", array(':nid' =>$qid, ':uid' => $user->uid, ':timestamp' => time(), ':fid' => $file->fid, ':gender' => $gender));
  
  $i = 0;
  $inserts = '';
  $db_args = array();
  foreach ($new_questions as $question_id){
    if (strlen($inserts))
      $inserts .= ', ';
    $inserts .= '(:nid' . $i . ', :question_id' . $i .', :active' . $i . ')';    
    $new_args = array(':nid' . $i => $qid, ':question_id' . $i => $question_id, ':active' . $i => 1);
    $db_args = array_merge($db_args, $new_args);
    $i++;     
  }
  $question_add_q = "INSERT INTO questionnaire_components (nid, question_id, active) VALUES " . $inserts;
  db_query($question_add_q, $db_args);
  drupal_set_message('You Poll has been succesfully created!');
  drupal_goto('/questionnaire');
}

function bt_questionnaire_edit_form($form, &$form_state, $questionnaire){
  /*$questionnaire = bt_questionnaire_get($uid);
  $result = db_query("SELECT nid FROM node WHERE uid = :uid", array(':uid' => $uid));
  foreach ($result as $row){
    $nid = $row->nid;
  }

  foreach ($questionnaire as $qid=>$q){
    $current_qs = $questionnaire[$qid]['questions'];
  }*/
  
  $current_questions = $questionnaire->questions;
  $form = array();  
  $form['return-link'] = array(
      '#type' => 'markup',
      '#markup' => '<a class = "user-link center" href = "/questionnaire/' . $questionnaire->nid . '">Return to Poll</a>'
  );
  $form['instructions'] = array(
      '#type' => 'markup',
      '#markup' => '<div class ="questionnaire-instructions">Feel free to change any of your display questions:</div>'
  );
  
  $questions = bt_questionnaire_questions_get();
  $form['questions'] = array(
      '#tree'=>TRUE
  );
  $form['nid'] = array(
      '#type' => 'value',
      '#value' => $questionnaire->nid
  );
  foreach ($questions as $qid=>$question){
        $answers = $question['answers'];
    $answer_text = ''; 
    if (count($answers) < 3){
      foreach ($answers as $answer_id => $answer){   
        if (strlen($answer_text))
          $answer_text .= ' OR ';
        $answer_text .= $answer['title'];
      }
    }
    $form['questions'][$qid]['select'] = array(
      '#type' => 'checkbox',
      '#prefix' => '<div class = "question-wrapper">',
      '#title' => strlen($answer_text) ? $answer_text : $question['title'],
      '#attributes' =>(isset($current_questions[$qid])) ? array('checked' => 'checked') : '',
      '#suffix' => '</div>'
    );

  }
  $form['submit'] = array(
      '#type'=>'submit',
      '#value' => t('Save Changes')
  );
  return $form;
}

function bt_questionnaire_edit_form_validate($form, &$form_state){
  
  $values = $form_state['values'];
  $questions = $values['questions'];

  foreach ($questions as $qid => $question){
    if ($question['select']){
      $selected_questions[$qid] = $qid;
    }
  }

  //make sure user selected at least 2 questions but no more than 6
  if (count($selected_questions) < 2 || count($selected_questions) > 6)
    form_set_error('questions', 'You must select at least 2 questions but no more than 6 questions');
}

function bt_questionnaire_edit_form_submit($form, &$form_state){
  global $user;
  $current_questions = bt_questionnaire_get($user->uid, TRUE);
  $current_question = $current_questions['questions'];
  
  $values = $form_state['values'];
  $nid = $values['nid'];
  $questions = $values['questions'];
  $new_questions = array();
  $remove_questions = array();
  //print_r($questions);
  foreach ($questions as $qid => $question){
    if ($question['select']){
      $new_questions[$qid] = $qid;
    }
    else{
      $remove_questions[':ids'][] = $qid;
    }
  }
  $add_query = "REPLACE INTO questionnaire_components (nid, question_id, active) VALUES";
  $placeholders = '';
  $db_args = array();
  $i = 0;
  foreach ($new_questions as $qid){
    if (strlen($placeholders))
        $placeholders .= ', ';
    
    $placeholders .= '(:nid' . $i . ', :question_id' . $i .', :active' . $i . ')';
    $db_args[':nid' . $i] = $nid;
    $db_args[':question_id' . $i] = $qid;
    $db_args[':active'.$i] = 1;
    $i++;
  }

  $add_query .= $placeholders;
  db_query($add_query, $db_args);
  
  $db_args = array(':nid' =>$nid);
  $db_args = array_merge($db_args, $remove_questions);
  if (!empty($remove_questions))
  db_query("UPDATE questionnaire_components SET active = 0 WHERE nid = :nid AND question_id IN(:ids)", $db_args);
  
  
}

function bt_questionnaire_delete($node){
  if ($node == 0)
    return;
  
  db_query("UPDATE node SET status = 0 WHERE nid = :nid", array(':nid' => $node->nid));
}


function bt_questionnaire_get($uid = NULL, $ids_only = FALSE){
  global $user;
  if (!$uid)
    $uid = $user->uid;
  
  $query = "SELECT n.*, qc.question_id, qq.title as 'questiontext', qa.answer_id, qa.title as 'answertext' FROM questionnaire q INNER JOIN node n 
            ON q.nid = n.nid 
            LEFT JOIN questionnaire_components qc
            ON q.nid = qc.nid
            LEFT JOIN questionnaire_questions qq
            ON qc.question_id = qq.id
            LEFT JOIN questionnaire_questions_answers qa
            ON qq.id = qa.question_id
            WHERE q.uid = :uid AND n.status = :status AND qc.active = :active";
  $db_args = array(':uid' =>$uid, ':status' =>1, ':active' =>1);
  
  $result = db_query($query, $db_args);
  $questionnaire = array();
  if ($ids_only){
    foreach ($result as $r){
      $questionnaire['questions'][$r->question_id] = $r->question_id;
      
    }
    return $questionnaire;
  }
  foreach($result as $r){
    $questionnaire[$r->nid]['questions'][$r->question_id]['title'] = $r->questiontext;
    $questionnaire[$r->nid]['questions'][$r->question_id]['id'] = $r->question_id;
    $questionnaire[$r->nid]['questions'][$r->question_id]['answers'][$r->answer_id]['title'] = $r->answertext;
    $questionnaire[$r->nid]['questions'][$r->question_id]['answers'][$r->answer_id]['id'] = $r->answer_id;
  }
  return $questionnaire;  
}

function bt_questionnaire_load(&$nodes){
  global $user;
  
  $query = "SELECT f.*, q.nid, qc.question_id, qq.title as 'questiontext', qa.answer_id, qa.title as 'answertext' FROM questionnaire q 
            LEFT JOIN questionnaire_components qc
            ON q.nid = qc.nid
            LEFT JOIN questionnaire_questions qq
            ON qc.question_id = qq.id
            LEFT JOIN questionnaire_questions_answers qa
            ON qq.id = qa.question_id
            LEFT JOIN file_managed f ON
            f.fid = q.fid
            WHERE q.nid IN(:nids) AND qc.active = :active";
  $db_args = array(':nids' => array_keys($nodes));
  $db_args = array_merge($db_args, array(':active' => 1));  
  $result = db_query($query, $db_args);
  $questions = array();
  $image = '';
  foreach($result as $r){
    $nid = $r->nid;
    $nodes[$nid]->questions[$r->question_id]['title'] = $r->questiontext;
    $nodes[$nid]->questions[$r->question_id]['id'] = $r->question_id;
    $nodes[$nid]->questions[$r->question_id]['answers'][$r->answer_id]['title'] = $r->answertext;
    $nodes[$nid]->questions[$r->question_id]['answers'][$r->answer_id]['id'] = $r->answer_id;
    if(!isset($nodes[$nid]->image))
      $nodes[$nid]->image = $r->uri;
  }
}

function bt_questionnaire_results($node){
  $q = "SELECT qr.*, qa.title as 'answer_text', qq.title as 'question_text', count(qr.answer_id) as 'votes' FROM questionnaire_responses qr
JOIN node n ON n.nid = qr.qnid 
LEFT JOIN questionnaire_questions qq ON qq.id = qr.question_id
LEFT JOIN questionnaire_questions_answers qa ON qa.answer_id = qr.answer_id
WHERE qr.qnid = :qnid group by qr.answer_id;";
  $result = db_query($q, array(':qnid' => $node->nid));
  $votes  = array();
  $total = array();
  foreach ($result as $row){
    $votes[$row->question_id]['title'] = $row->question_text;
    $votes[$row->question_id]['answers'][$row->answer_id]['votes'] = $row->votes;
    $votes[$row->question_id]['answers'][$row->answer_id]['title'] = $row->answer_text;
    isset($total['questions'][$row->question_id]) ? $total['questions'][$row->question_id] += $row->votes : $total['questions'][$row->question_id] = $row->votes;
    isset($total['answers'][$row->answer_id]) ? $total['answers'][$row->answer_id] += $row->votes : $total['answers'][$row->answer_id] = $row->votes;
  }
  
  $output = '<div id = "questionnaire-results-wrapper">';
  $output .= '<h2 class = "header">Results</h2>';
  
  foreach ($votes as $qid=>$question){
    $header = array();
    $header[] = array('data' =>'<p class = "question-results-title"><span class = "total-question-votes">' . $total['questions'][$qid] . ' total votes </span></p>', 'colspan' =>2);
    $rows = array();
    foreach ($question['answers'] as $aid=>$answer){
      $row = array();
      $perc = round(($votes[$qid]['answers'][$aid]['votes']/$total['questions'][$qid]) * 100) . '%';
      $row[] = array('data' => $perc . ' <span class = "total-votes"> (' . $votes[$qid]['answers'][$aid]['votes'] . ' total votes) </span> SAID ' . $answer['title'], 'class' =>'stats-row'); 
      $bar_graph = '<div class = "bar"><div class = "bar-graph"style="width: ' . $perc  .'"></div></div>';
      $row[] = array('data'=> $bar_graph, 'class' => 'bar-row');
      $rows[] = $row;
      
    }
    $output .= theme('table',array('header'=> $header,'rows'=> $rows, 'sticky' => FALSE, 'attributes' =>array('class' => 'results-table')));
  }

  $output .="</div></div>";
  
  return $output;

  //MAKE A THEME OF THE ABOVE TABLES return theme('bt_questionnaire_results', array($node, $votes, $total));
}

function bt_questionnaire_list(){
  drupal_add_js(drupal_get_path('module', 'bt_questionnaire') . '/bt_questionnaire.js');
  $output = '';
  $output .= '<div id="filter-controls-wrapper">';
  $output .= '<div class="gender-filter">';
  $output .= '</div>';
  $output .= '</div>';
  $output .= '<div id="results-wrapper"><img class="ajax-loader" src="sites/all/themes/zen/zen-internals/images/ajax-loader.gif"/></div>';
  return $output;
}
